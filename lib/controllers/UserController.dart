import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../database/user_dao.dart';
// import '../models/event.dart';
import '../models/User.dart';

class UserController {
  final UserDAO _dao = UserDAO();

  // Sign-up a new user
  Future<String?> signUp(UserModel user, String password) async {
    try {
      // Check if the phone number is unique
      if (!await _dao.isPhoneNumberUnique(user.phone)) {
        return "Phone number is already in use.";
      }

      // Check if the email is unique
      if (!await _dao.isEmailUnique(user.email)) {
        return "Email is already in use.";
      }

      // Create user with FirebaseAuth
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: user.email, password: password);

      // Retrieve UID generated by FirebaseAuth
      String userId = userCredential.user!.uid;

      // Save user details in Firestore
      UserModel newUser = UserModel(
        UserModelId: userId,
        name: user.name,
        email: user.email,
        phone: user.phone,
        birthday: user.birthday,
      );
      await _dao.addUser(newUser);

      return null; // Success
    } on FirebaseAuthException catch (e) {
      // Handle specific FirebaseAuth errors
      if (e.code == 'network-request-failed') {
        return "No internet connection. Please check your connection.";
      } else {
        return e.message;
      }
    } catch (e) {
      // Handle other errors
      return "An unexpected error occurred: ${e.toString()}";
    }
  }

  // Sign-in an existing user
  Future<bool> signIn(BuildContext context, String email, String password) async {
    try {
      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: email, password: password);

      // Navigate to home screen
      Navigator.pushNamed(context, '/home');
      return true;
    } on FirebaseAuthException catch (e) {
      print('Error: ${e.message}');
      return false;
    }
  }

  // Get user by ID
  Future<UserModel?> getUserById(String userId) async {
    try {
      // Fetch user details from Firestore using UserDAO
      UserModel? userDetails = await _dao.getUserByUserModelId(userId);
      return userDetails;
    } catch (e) {
      print('Error retrieving user by ID: ${e.toString()}');
      return null;
    }
  }

  // Sign-out the current user
  Future<bool> signOut() async {
    try {
      await FirebaseAuth.instance.signOut();
      return true;
    } catch (e) {
      print('Error signing out: ${e.toString()}');
      return false;
    }
  }
}

